# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9Vo10AoJRXhEDv_KdYev8imTuYIJoBJ
"""

import pickle
import pandas as pd
import numpy as np


class SentimentRecommender:
    root_model_path = "models/"
    sentiment_model = "lr_model.pkl"
    tfidf_vectorizer = "tfidf.pkl"
    best_recommender = "best_recommendation_system.pkl"
    clean_dataframe = "clean_data.pkl"

    def __init__(self):
        self.sentiment_model = pickle.load(open(
            SentimentRecommender.root_model_path + SentimentRecommender.sentiment_model, 'rb'))
        self.tfidf_vectorizer = pd.read_pickle(
            SentimentRecommender.root_model_path + SentimentRecommender.tfidf_vectorizer, 'rb')
        self.user_final_rating = pickle.load(open(
            SentimentRecommender.root_model_path + SentimentRecommender.best_recommender, 'rb'))
        self.cleaned_data = pickle.load(open(
            SentimentRecommender.root_model_path + SentimentRecommender.clean_dataframe, 'rb'))

    def product_recommendations_user(self, user_name):
      if user_name not in self.user_final_rating.index:
        print(f"The User {user_name} does not exist. Please provide a valid user name")
      else:
        top20_recommendations = self.user_final_rating.loc[user_name].sort_values(ascending=True)[0:20]
        df_top20_recommendations = pd.DataFrame({'Product Id': top20_recommendations.index, 'cosine_similarity_score' : top20_recommendations})
        df_top20_recommendations.reset_index(drop=True, inplace=True)
        df_top20 = self.df_top20_recommendations.merge(data_reco_f, how = 'inner', left_on = 'Product Id', right_on = 'id')
        df_top20 = self.df_top20.drop_duplicates(subset ='Product Id')
        X = self.tfidf.transform(df_top20["reviews_lemma_text"].values.astype(str))
        df_top20['predicted_sentiment'] = clf_lr_tuned.predict(X)
        final_rec = df_top20[df_top20['predicted_sentiment'] == 'Positive'][:5]

      return final_rec[['Product Id','name', 'cosine_similarity_score']]